---
title: "Lower Basin Projected Water Use: 2025 - 2027"
subtitle: "April 2025: Probable Maximum 24-Month Study"
format:
  docx:
    mainfont: Arial # Sets the main font to Arial for Word output
    reference-doc: custom-reference-doc.docx # Use template
filters:
  - pandoc-word-styles.lua
---

```{r setup, include=FALSE}
# This chunk is for global R options and loading packages
# Set echo=FALSE to hide code, warning=FALSE to hide warnings, message=FALSE to hide messages
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)

packages_needed <- c("tidyverse", "knitr", "readxl", "janitor", "stringr",
                     "flextable", "officer", "zoo")

# Loop through the package list and install if not already installed
for (pkg in packages_needed) {
  if (!requireNamespace(pkg, quietly = TRUE)) {
    install.packages(pkg)
  }
}

library(tidyverse) # To use tidyverse functions
library(knitr)     # For kable tables
library(readxl)
library(janitor)
library(stringr)
library(flextable)
library(officer)
library(zoo)

source("helper-functions.R")

##### Update file paths ######################
file_path <- "data/Projected State Use -APR25.xlsx"

# file path for the Water Use Assumption SCT export excel file
file_path2 <- "data/APR25-Max.xlsx"

# Update sheet name and data range for the Water Use Assumption SCT export
sheet_name4 <- "Sheet1"
data_range4 <- "A1:E55"
##############################################

## There sheet names and data ranges (for Projected State Use) should not be changed.
sheet_name1 <- as.character(year(Sys.Date()))
sheet_name2 <- as.character(year(Sys.Date())+1)
sheet_name3 <- as.character(year(Sys.Date())+2)
data_range1 <- "A1:D58" # MOST Data range
data_range2 <- "F1:I58" # MIN Data range
data_range3 <- "K1:N58" # MAX Data range
# Conservation data ranges
rangeCA = "AH4:AM20"
rangeNonCAWCD = "Z4:AE20"
rangeCAWCD = "R4:W20"

sheet_cons = "System Conservation"

#####################################################################


# Read MAX data
#Current Year
Max1 <- process_excel_data(file_path, sheet_name1, data_range3)

#First Out year
Max2 <- process_excel_data(file_path, sheet_name2, data_range3)

#Second Out Year
Max3 <- process_excel_data(file_path, sheet_name3, data_range3)

# Get SCT data
if (!file.exists(file_path2)) {
  stop(paste("Error: The file was not found at the specified path:", file_path2))
}

sct_data <- read_excel(path = file_path2, sheet = sheet_name4, range = data_range4)

sct_data <- sct_data[, -2]

if (ncol(sct_data) == 4) {
  # Get the current year
  current_year <- year(Sys.Date()) # Using lubridate's year() function
  
  # Define the new column names
  new_column_names <- c(
    "Item",
    paste0("CY", current_year),
    paste0("CY", current_year + 1),
    paste0("CY", current_year + 2)
  )
  
  # Assign the new names to excel_data2
  names(sct_data) <- new_column_names
  
} else {
  warning(paste("Warning: sct_data does not have the expected 4 columns after deletion. It has", 
                ncol(sct_data), "columns. Column renaming might be incorrect."))
}

apportionment <- sct_data %>% 
  filter(
    str_detect(Item,
               regex(
                 "California_Apportionment|.AzTotalAnnual|.NvTotalAnnual"
                 )
               )
    ) 

#round(sum(apportionment[,2])/1000000,3)

mwdICSY1 = ifelse(find_rows_containing_string(sct_data,"MWD_Default")[1,2],
               paste0("creation of ", 
                      round(find_rows_containing_string(sct_data,"MWD_Default")[1,2]/1000,1)),
               paste0("delivery of ", 
                      round(find_rows_containing_string(sct_data,"MWD_Default")[2,2]/1000,1)))

mwdICSY2 = ifelse(find_rows_containing_string(sct_data,"MWD_Default")[1,3],
               paste0("creation of ", 
                      round(find_rows_containing_string(sct_data,"MWD_Default")[1,3]/1000,1)),
               paste0("delivery of ", 
                      round(find_rows_containing_string(sct_data,"MWD_Default")[2,3]/1000,1)))

mwdICSY3 = ifelse(find_rows_containing_string(sct_data,"MWD_Default")[1,4],
               paste0("creation of ", 
                      round(find_rows_containing_string(sct_data,"MWD_Default")[1,4]/1000,1)),
               paste0("delivery of ", 
                      round(find_rows_containing_string(sct_data,"MWD_Default")[2,4]/1000,1)))

cons_CA <- tryCatch({
  readxl::read_excel(path = file_path, sheet = sheet_cons, range = rangeCA)
}, error = function(e) {
  stop(paste("Error reading Excel file:", e$message))
  return(NULL) # Should not reach here due to stop()
})

cons_CA <- remove_all_na_rows(cons_CA)

cons_NonCAWCD <- tryCatch({
  readxl::read_excel(path = file_path, sheet = sheet_cons, range = rangeNonCAWCD)
}, error = function(e) {
  stop(paste("Error reading Excel file:", e$message))
  return(NULL) # Should not reach here due to stop()
})

cons_NonCAWCD <- remove_all_na_rows(cons_NonCAWCD)
#remove 242
cons_NonCAWCD_filt <- cons_NonCAWCD %>% 
  slice_head(n = -1)
cons_NonCAWCD_tot <- cons_NonCAWCD %>% 
  slice_head(n = -1) %>% 
  summarise(across(where(is.numeric), \(x) sum(x, na.rm = TRUE))) 

cons_CAWCD <- tryCatch({
  readxl::read_excel(path = file_path, sheet = sheet_cons, range = rangeCAWCD)
}, error = function(e) {
  stop(paste("Error reading Excel file:", e$message))
  return(NULL) # Should not reach here due to stop()
})

cons_CAWCD_tot <- cons_CAWCD %>% 
  summarise(across(where(is.numeric), \(x) sum(x, na.rm = TRUE)))

current_year <- format(Sys.Date(), "%Y")
column_number <- which(grepl(current_year, colnames(cons_NonCAWCD)))



text_to_exclude = "CVWD"
cons_CA_filt <- cons_CA %>%
  filter(is.na(Contractor) | !str_detect(Contractor, fixed(text_to_exclude)))

cvwd <- find_rows_containing_string(cons_CA, text_to_exclude)
new_item <- c("Contractor" = "CVWD")
new_item <- c(new_item, colSums(cvwd[,2:ncol(cvwd)]))

cons_CA_filt <- cons_CA %>%
  filter(is.na(Contractor) | !str_detect(Contractor, fixed(text_to_exclude)))

cons_CA_filt <- rbind(tibble::as_tibble(as.list(new_item)), cons_CA_filt)

name_lookup <- c(
  "IID 2023-2026" = "IID",
  "GM Gabrych/Matador" = "Gabrych",
  "Metro Water Dist" = "Metro Water District",
  "Spanish Trail Water Company" = "Spanish Trail Water Co."
)

updated_cons_CA_filt <- replace_items_conditional(cons_CA_filt , name_lookup)

cons_CA_CY <- updated_cons_CA_filt %>% 
  filter(.[[column_number]] > 0) %>% 
  select(1,all_of(column_number))

cons_CA_CY2 <- updated_cons_CA_filt %>% 
  filter(.[[column_number+1]] > 0) %>% 
  select(1,all_of(column_number+1))

cons_CA_CY3 <- updated_cons_CA_filt %>% 
  filter(.[[column_number+2]] > 0) %>% 
  select(1,all_of(column_number+2))

cons_CAWCD <- remove_all_na_rows(cons_CAWCD)

cons_CAWCD_CY <- replace_items_conditional(cons_CAWCD, name_lookup) %>% 
  filter(.[[column_number]] > 0) %>% 
  select(1,all_of(column_number))

cons_NonCAWCD_CY <- cons_NonCAWCD_filt %>% 
  replace_items_conditional(name_lookup) %>% 
  filter(.[[column_number]] > 0) %>% 
  select(1,all_of(column_number))

cons_CAWCD_CY2 <- replace_items_conditional(cons_CAWCD, name_lookup) %>% 
  filter(.[[column_number+1]] > 0) %>% 
  select(1,all_of(column_number+1))

cons_NonCAWCD_CY2 <- cons_NonCAWCD_filt %>% 
  replace_items_conditional(name_lookup) %>% 
  filter(.[[column_number+1]] > 0) %>% 
  select(1,all_of(column_number+1))

cons_CAWCD_CY3 <- replace_items_conditional(cons_CAWCD, name_lookup) %>% 
  filter(.[[column_number+2]] > 0) %>% 
  select(1,all_of(column_number+2))

cons_NonCAWCD_CY3 <- cons_NonCAWCD_filt %>% 
  replace_items_conditional(name_lookup) %>% 
  filter(.[[column_number+2]] > 0) %>% 
  select(1,all_of(column_number+2))

# Example condition for conditional Markdown
# Replace this with your actual condition
show_2025_detailed_note <- FALSE 
# show_2025_detailed_note <- (a == 3) # Another example condition

```

### `r current_year`

Total projected water use **(`r sprintf("%.3f",round(as.numeric(find_rows_containing_string(Max1,"Total Basin Use")$value)/1000000,3))` maf)** â€“ Based on Lake Mead Operating Condition of Level 1 Shortage and water savings contributions under the LB DCP Agreement and IBWC Minute 323.

```{r conditional-2025-note, results='asis', echo=FALSE}
# This R code chunk will print Markdown text if the condition is met.
# The 'results="asis"' option is crucial for this to work.

if (exists("show_2025_detailed_note") && show_2025_detailed_note) {
  cat("\n") # Ensures a new line before the conditional text
  cat("**Important Note for 2025:** *This text is included based on an R condition.*\n")
  cat("You can include any valid Markdown here, like:\n")
  cat("- Bullet points\n")
  cat("- **Bold text** or *italic text*\n")
  cat("> Blockquotes\n")
}
```

#### U.S. Contractors: `r sprintf("%.3f",round(sum(apportionment[,2])/1000000,3))` maf

##### California: [`r sprintf("%.3f",round(sum(apportionment[1,2])/1000000,3))` maf]{style="color: #0070C0;"}
* MWD annual diversion of `r round(as.numeric(find_rows_containing_string(sct_data,"MWDDiversionAnnualFC")[2])/1000,0)` kaf
    * Projected diversion includes the `r mwdICSY1` kaf of ICS

```{r generate-bullet-list-apply, results='asis'}
# Check if cons_CA_CY has rows and at least two columns before proceeding
if (nrow(cons_CA_CY) > 0 && ncol(cons_CA_CY) >= 2) {
  cat("* Total California System Conservation of ")
  cat(sprintf("%.1f",round(sum(cons_CA[,column_number])/1000,1)))
  cat(" kaf\n")
  # Use apply to iterate over rows. For each row:
  # row[1] will be the value from the first column of cons_CA_CY
  # row[2] will be the value from the second column of cons_CA_CY
  bullet_points <- apply(cons_CA_CY, 1, function(row) {
    paste0("  * ", row[1], " system conservation of ", round(as.numeric(row[2])/1000,1) , " kaf\n")
  })
  
  # Print each bullet point, separated by a newline
  cat(paste0(bullet_points, collapse = ""))
  
}

```

* Needles PSCP volume of `r as.numeric(find_rows_containing_string(Max1, "Needles")$value)*-1` af
```{r conditional-CA-BICS-Y1, results='asis', echo=FALSE}

if(find_rows_containing_string(sct_data, "AnnualCreationBiNat_MWD")[1,2]>0){
  addBICS = TRUE
  bics = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationBiNat_MWD")[1,2]/1000,1)))
} else{
  addBICS = FALSE
  bics=""
}

if (exists("addBICS") && addBICS) {
  
  cat("* Binational ICS creation of ")
  cat(bics)
  cat(" kaf by MWD and IID\n")
}


```

##### Arizona: [`r sprintf("%.3f",round(sum(apportionment[2,2])/1000000,3))` maf]{style="color: #0070C0;"}
* CAP annual diversion of `r round(find_rows_containing_string(sct_data, "CAPAnnualFC")[1,2]/1000,0)` kaf

```{r conditional-AZ-reductions-Y1, results='asis', echo=FALSE}

addreductions = calculate_AZ_reductions(year=1, sct_data = sct_data)$addreductions
reductions_scen_all = calculate_AZ_reductions(year=1, sct_data = sct_data)$reductions_scen_all

if (exists("addreductions") && addreductions) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("    * Projected diversion includes a ")
  cat(reductions_scen_all)
  cat("\n")
}

az_dcpICS <- find_rows_containing_string(sct_data, "AnnualCreationDCP_CAWCD")[2]
az_dcpICS <- ifelse((az_dcpICS/1000) %% 1 != 0, round(az_dcpICS/1000, 1), round(az_dcpICS/1000, 0))
az_dcpSys <- find_rows_containing_string(sct_data, "AnnualSysWaterforDCP_CAWCD")[2]
az_dcpSys <- ifelse((az_dcpSys/1000) %% 1 != 0, round(az_dcpSys/1000, 1), round(az_dcpSys/1000, 0))

```

* DCP contribution will be made by creating `r ifelse(az_dcpICS > 0, paste0(az_dcpICS, " kaf of ICS and ", az_dcpSys, " kaf of non-ICS water"), paste0(az_dcpSys, " kaf of non-ICS water"))` 
* Total non-CAWCD System Conservation of `r sprintf("%.1f",round(sum(cons_NonCAWCD_filt[,column_number])/1000,1))` kaf
```{r generate-bullet-list-nonCAWCD-y1, results='asis'}
# Check if cons_CA_CY has rows and at least two columns before proceeding
if (nrow(cons_NonCAWCD_CY) > 0 && ncol(cons_NonCAWCD_CY) >= 2) {

  # Use apply to iterate over rows. For each row:
  # row[1] will be the value from the first column of cons_CA_CY
  # row[2] will be the value from the second column of cons_CA_CY
  bullet_points <- apply(cons_NonCAWCD_CY, 1, function(row) {
    paste0("  * ", row[1], " : ", ifelse(as.numeric(row[2])>100, paste0(round(((as.numeric(row[2])/1000)*100+.1),-1)/100 , " kaf\n"), paste0(round((as.numeric(row[2])*10+.1),-1)/10, " af\n") ))
  })
  
  # Print each bullet point, separated by a newline
  cat(paste0(bullet_points, collapse = ""))
  
} else if (nrow(cons_NonCAWCD_CY) == 0) {
  cat("No data available in `cons_NonCAWCD_CY` to create a list.")
} else {
  cat("`cons_NonCAWCD_CY` does not have at least two columns as expected.")
}
```

* Total CAWCD System Conservation of `r sprintf("%.1f",round(sum(cons_CAWCD[,column_number])/1000,1))` kaf

```{r generate-bullet-list-CAWCD-Y1, results='asis'}
# Check if cons_CA_CY has rows and at least two columns before proceeding
if (nrow(cons_CAWCD_CY) > 0 && ncol(cons_CAWCD_CY) >= 2) {

  # Use apply to iterate over rows. For each row:
  # row[1] will be the value from the first column of cons_CA_CY
  # row[2] will be the value from the second column of cons_CA_CY
  bullet_points <- apply(cons_CAWCD_CY, 1, function(row) {
    paste0("  * ", row[1], " : ", ifelse(as.numeric(row[2])>100, paste0(round(((as.numeric(row[2])/1000)*100+.1),-1)/100 , " kaf\n"), paste0(round((as.numeric(row[2])*10+.1),-1)/10, " af\n") ))
  })
  
  # Print each bullet point, separated by a newline
  cat(paste0(bullet_points, collapse = ""))
  
} else if (nrow(cons_CAWCD_CY) == 0) {
  cat("No data available in `cons_CAWCD_CY` to create a list.")
} else {
  cat("`cons_CAWCD_CY` does not have at least two columns as expected.")
}


```

* Bullhead City PSCP volume of `r as.numeric(find_rows_containing_string(Max1, "BHC")$value)*-1` af

```{r conditional-AZ-242-Y1, results='asis', echo=FALSE}

if(find_rows_containing_string(cons_NonCAWCD,"242 Wellfield")[,column_number]>0){
  add242 = TRUE
  vol242 = sprintf("%.1f",round(find_rows_containing_string(cons_NonCAWCD,"242 Wellfield")[,column_number]/1000,1))
} else{
  add242 = FALSE
  vol242=""
}

if (exists("add242") && add242) {
  
  cat("* System water created by the 242 Well Field Expansion Project of ")
  cat(vol242)
  cat(" kaf\n")
}

```


```{r conditional-AZ-BICS-Y1, results='asis', echo=FALSE}

if (exists("addBICS") && addBICS) {
  
  cat("* Binational ICS creation of ")
  cat(bics)
  cat(" kaf by CAWCD\n")
}

```

##### Nevada: [`r sprintf("%.3f",round(find_rows_containing_string(sct_data, "NvTotalAnnual")[1,2]/1000000,3))` maf]{style="color: #0070C0;"}
* SNWA annual use of `r round(find_rows_containing_string(sct_data, "SNWPAnnualFC")[1,2]/1000,0)` kaf. Projected diversion includes:

```{r conditional-NV-Shortage, results='asis', echo=FALSE}
# This R code chunk will print Markdown text if the condition is met.
# The 'results="asis"' option is crucial for this to work.

if(find_rows_containing_string(sct_data, "SNWP Annual Shortage Volume")[1,2]>0){
  addNVShortage = TRUE
  nvshort = unlist(unname(round(find_rows_containing_string(sct_data, "SNWP Annual Shortage Volume")[1,2]/1000,0)))
} else{
  addNVShortage = FALSE
  nvshort=""
}

if(find_rows_containing_string(sct_data, "VacatedECICSToBeDelivered_SNWA")[1,2]>0){
  addECICSdel = TRUE
  nvECICSdel = unlist(unname(round(find_rows_containing_string(sct_data, "VacatedECICSToBeDelivered_SNWA")[1,2]/1000,1)))
} else{
  addECICSdel = FALSE
  nvECICSdel=""
}

if (exists("addNVShortage") && addNVShortage) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("  * Shortage volume of ")
  cat(nvshort)
  cat(" kaf\n")
}

if (exists("addECICSdel") && addECICSdel) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("  * Delivery of ")
  cat(nvECICSdel)
  cat(" kaf of EC ICS due to full ICS bank\n")
}

```


```{r conditional-NV-DCP, results='asis', echo=FALSE}
# This R code chunk will print Markdown text if the condition is met.
# The 'results="asis"' option is crucial for this to work.

if(find_rows_containing_string(sct_data, "AnnualCreationDCP_NV")[1,2]>0){
  addNVDCP = TRUE
  nvdcp = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationDCP_NV")[1,2]/1000,0)))
} else{
  addNVDCP = FALSE
  nvdcp=""
}

if (exists("addNVDCP") && addNVDCP) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("* DCP contribution of ")
  cat(nvdcp)
  cat(" kaf through EC ICS conversion\n")
}


```


```{r conditional-NV-SysCons, results='asis', echo=FALSE}
# This R code chunk will print Markdown text if the condition is met.
# The 'results="asis"' option is crucial for this to work.

if(find_rows_containing_string(sct_data, "NV_SystemConservation")[1,2]>0){
  addNVTotSyscon = TRUE
  nvTotSyscon = unlist(unname(round(find_rows_containing_string(sct_data, "NV_SystemConservation")[1,2]/1000,0)))
} else{
  addNVTotSyscon = FALSE
  nvTotSyscon=""
}

if(find_rows_containing_string(sct_data, "NV_LeftinMead")[1,2]>0){
  addTribSyscon = TRUE
  nvTribSyscon = unlist(unname(round(find_rows_containing_string(sct_data, "NV_LeftinMead")[1,2]/1000,0)))
} else{
  addTribSyscon = FALSE
  nvTribSyscon=""
}


if (exists("addNVTotSyscon") && addNVTotSyscon) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("* Total System Conservation of ")
  cat(nvTotSyscon)
  cat(" kaf\n")
}

if (exists("addTribSyscon") && addTribSyscon) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("  * Tributary conservation of ")
  cat(nvTribSyscon)
  cat(" kaf\n")
}

if(addNVTotSyscon && addTribSyscon) {
  if((nvTotSyscon - nvTribSyscon)>0){
    cat("  * Other system conservation of ")
    cat(nvTotSyscon - nvTribSyscon)
    cat(" kaf\n")
  }
}


```

```{r conditional-NV-BICS-Y1, results='asis', echo=FALSE}

if (exists("addBICS") && addBICS) {
  
  cat("* Binational ICS creation of ")
  cat(bics)
  cat(" kaf by SNWA\n")
}

if(find_rows_containing_string(sct_data, "VacatedDCPICSToSysWater_SNWA")[1,2]>0){
  addVacDCPtoSys = TRUE
  nvVacDCPtoSys = unlist(unname(round(find_rows_containing_string(sct_data, "VacatedDCPICSToSysWater_SNWA")[1,2]/1000,1)))
} else{
  addVacDCPtoSys = FALSE
  nvVacDCPtoSys=""
}

if(find_rows_containing_string(sct_data, "VacatedECICSToSysWater_SNWA")[1,2]>0){
  addVacECICStoSys = TRUE
  nvVacECICStoSys = unlist(unname(round(find_rows_containing_string(sct_data, "VacatedECICSToSysWater_SNWA")[1,2]/1000,1)))
} else{
  addVacECICStoSys = FALSE
  nvVacECICStoSys=""
}

if (addVacDCPtoSys && addVacECICStoSys) {
  # Both are TRUE: assign the sum
  totaltosys <- nvVacDCPtoSys + nvVacECICStoSys
} else if (addVacDCPtoSys) {
  # Only addVacDCPtoSys is TRUE: assign its corresponding numeric value
  totaltosys <- nvVacDCPtoSys
} else if (addVacECICStoSys) {
  # Only addVacECICStoSys is TRUE: assign its corresponding numeric value
  totaltosys <- nvVacECICStoSys # Using the assumed numeric variable name
}

if (addVacDCPtoSys || addVacECICStoSys) {
  cat("* Vacated ICS space (to system water) of ") 
  cat(totaltosys)
  cat(" kaf\n")
}

if (addVacDCPtoSys){
  cat("  * DCP ICS of ")
  cat(nvVacDCPtoSys)
  cat(" kaf converted to system water\n")
}

if (addVacECICStoSys){
  cat("  * EC ICS of ")
  cat(nvVacECICStoSys)
  cat(" kaf converted to system water\n")
}

```

#### Mexicoâ€™s Scheduled Water Delivery: `r sprintf("%.3f", round(as.numeric(find_rows_containing_string(Max1, "Mexico Use")$value)/1000000,3))` maf

```{r conditional-Mx-short-Y1, results='asis', echo=FALSE}
# This R code chunk will print Markdown text if the condition is met.
# The 'results="asis"' option is crucial for this to work.

if(find_rows_containing_string(sct_data, "Mexico Annual Shortage")[1,2]>0){
  addMxShort = TRUE
  mxShort = unlist(unname(round(find_rows_containing_string(sct_data, "Mexico Annual Shortage")[1,2]/1000,0)))
} else{
  addMxShort = FALSE
  mxShort=""
}

if(find_rows_containing_string(sct_data, "AnnualCreationMXRecoverableWaterSavings")[1,2]>0){
  createWaterSav = TRUE
  mxCreateWaterSav = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationMXRecoverableWaterSavings")[1,2]/1000,0)))
} else{
  createWaterSav = FALSE
  mxCreateWaterSav=""
}

if(find_rows_containing_string(sct_data, "AnnualDeliveryMXRecoverableWaterSavings")[1,2]>0){
  delWaterSav = TRUE
  mxdelWaterSav = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualDeliveryMXRecoverableWaterSavings")[1,2]/1000,0)))
} else{
  delWaterSav = FALSE
  mxdelWaterSav=""
}

if(find_rows_containing_string(sct_data, "MX_SystemConservation")[1,2]>0){
  createsysCons = TRUE
  mxSysCon = unlist(unname(round(find_rows_containing_string(sct_data, "MX_SystemConservation")[1,2]/1000,1)))
} else{
  createsysCons = FALSE
  mxSysCon=""
}

if(find_rows_containing_string(sct_data, "AnnualDeliveryMexicoWaterReserve")[1,2]>0){
  delMWR = TRUE
  mxdelMWR = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualDeliveryMexicoWaterReserve")[1,2]/1000,1)))
} else{
  delMWR = FALSE
  mxdelMWR=""
}

if(find_rows_containing_string(sct_data, "AnnualCreationMexicoWaterReserve")[1,2]>0){
  createMWR = TRUE
  mxcreateMWR = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationMexicoWaterReserve")[1,2]/1000,1)))
} else{
  createMWR = FALSE
  mxcreateMWR=""
}

if (exists("createWaterSav") && createWaterSav) {
  cat("* Projected delivery includes:\n")
  
  if (exists("addMxShort") && addMxShort) {
    cat("  * Shortage volume of ")
    cat(mxShort)
    cat(" kaf\n")
  }
  
  cat("  * Recoverable Water Savings Contribution of ")
  cat(mxCreateWaterSav)
  cat(" kaf\n")
  
  if (exists("delWaterSav") && delWaterSav) {
    cat("  * Recoverable Water Savings Delivery of ")
    cat(mxdelWaterSav)
    cat(" kaf\n")
  }
  
  if (exists("createsysCons") && createsysCons) {
    cat("  * Minute 330 System Conservation of ")
    cat(mxSysCon)
    cat(" kaf\n")
  }
  
  if (exists("delMWR") && delMWR) {
    cat("* Water Reserve delivery of ")
    cat(mxdelMWR)
    cat(" kaf\n")
  }
  
  if (exists("createMWR") && createMWR) {
    cat("* Water Reserve creation of ")
    cat(mxcreateMWR)
    cat(" kaf\n")
  }
}

```


### `r as.numeric(current_year) + 1`

Total projected water use **(`r sprintf("%.3f",round(as.numeric(find_rows_containing_string(Max2,"Total Basin Use")$value)/1000000,3))` maf)** â€“ Based on Lake Mead Operating Condition of Level 1 Shortage and water savings contributions under the LB DCP Agreement and IBWC Minute 323.

#### U.S. Contractors: `r sprintf("%.3f",round(sum(apportionment[,3])/1000000,3))` maf

##### California: [`r sprintf("%.3f",round(sum(apportionment[1,3])/1000000,3))` maf]{style="color: #0070C0;"}
* MWD annual diversion of `r round(as.numeric(find_rows_containing_string(sct_data,"MWDDiversionAnnualFC")[3])/1000,0)` kaf
    * Projected diversion includes the `r mwdICSY2` kaf of ICS
```{r generate-bullet-list-apply-2, results='asis'}
# Check if cons_CA_CY2 has rows and at least two columns before proceeding

if (nrow(cons_CA_CY2) > 0 && ncol(cons_CA_CY2) >= 2) {
  
  cat("* Total California System Conservation of ")
  cat(sprintf("%.1f",round(sum(cons_CA[,column_number+1])/1000,1)))
  cat(" kaf\n")

  # Use apply to iterate over rows. For each row:
  # row[1] will be the value from the first column of cons_CA_CY
  # row[2] will be the value from the second column of cons_CA_CY
  bullet_points <- apply(cons_CA_CY2, 1, function(row) {
    paste0("  * ", row[1], " system conservation of ", round(as.numeric(row[2])/1000,1) , " kaf\n")
  })
  
  # Print each bullet point, separated by a newline
  cat(paste0(bullet_points, collapse = ""))
  
} 

```

* Needles PSCP volume of `r as.numeric(find_rows_containing_string(Max2, "Needles")$value)*-1` af
```{r conditional-CA-BICS-Y2, results='asis', echo=FALSE}

if(find_rows_containing_string(sct_data, "AnnualCreationBiNat_MWD")[1,3]>0){
  addBICS = TRUE
  bics = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationBiNat_MWD")[1,3]/1000,1)))
} else{
  addBICS = FALSE
  bics=""
}

if (exists("addBICS") && addBICS) {
  
  cat("* Binational ICS creation of ")
  cat(bics)
  cat(" kaf by MWD and IID\n")
}


```

##### Arizona: [`r sprintf("%.3f",round(sum(apportionment[2,3])/1000000,3))` maf]{style="color: #0070C0;"}
* CAP annual diversion of `r round(find_rows_containing_string(sct_data, "CAPAnnualFC")[1,3]/1000,0)` kaf

```{r conditional-AZ-reductions-Y2, results='asis', echo=FALSE}

addreductions = calculate_AZ_reductions(year=2, sct_data = sct_data)$addreductions
reductions_scen_all = calculate_AZ_reductions(year=2, sct_data = sct_data)$reductions_scen_all

if (exists("addreductions") && addreductions) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("    * Projected diversion includes a ")
  cat(reductions_scen_all)
  cat("\n")
}

az_dcpICS <- find_rows_containing_string(sct_data, "AnnualCreationDCP_CAWCD")[3]
az_dcpICS <- ifelse((az_dcpICS/1000) %% 1 != 0, round(az_dcpICS/1000, 1), round(az_dcpICS/1000, 0))
az_dcpSys <- find_rows_containing_string(sct_data, "AnnualSysWaterforDCP_CAWCD")[3]
az_dcpSys <- ifelse((az_dcpSys/1000) %% 1 != 0, round(az_dcpSys/1000, 1), round(az_dcpSys/1000, 0))

```

* DCP contribution will be made by creating `r ifelse(az_dcpICS > 0, paste0(az_dcpICS, " kaf of ICS and ", az_dcpSys, " kaf of non-ICS water"), paste0(az_dcpSys, " kaf of non-ICS water"))` 
* Total non-CAWCD System Conservation of `r sprintf("%.1f",round(sum(cons_NonCAWCD_filt[,column_number +1])/1000,1))` kaf
```{r generate-bullet-list-nonCAWCD-Y2, results='asis'}
# Check if cons_CA_CY has rows and at least two columns before proceeding
if (nrow(cons_NonCAWCD_CY2) > 0 && ncol(cons_NonCAWCD_CY2) >= 2) {

  # Use apply to iterate over rows. For each row:
  # row[1] will be the value from the first column of cons_CA_CY
  # row[2] will be the value from the second column of cons_CA_CY
  bullet_points <- apply(cons_NonCAWCD_CY2, 1, function(row) {
    paste0("  * ", row[1], " : ", ifelse(as.numeric(row[2])>100, paste0(round(((as.numeric(row[2])/1000)*100+.1),-1)/100 , " kaf\n"), paste0(round((as.numeric(row[2])*10+.1),-1)/10, " af\n") ))
  })
  
  # Print each bullet point, separated by a newline
  cat(paste0(bullet_points, collapse = ""))
  
} 

```

* Total CAWCD System Conservation of `r sprintf("%.1f",round(sum(cons_CAWCD[,column_number +1])/1000,1))` kaf

```{r generate-bullet-list-CAWCD-Y2, results='asis'}
# Check if cons_CA_CY has rows and at least two columns before proceeding
if (nrow(cons_CAWCD_CY2) > 0 && ncol(cons_CAWCD_CY2) >= 2) {

  # Use apply to iterate over rows. For each row:
  # row[1] will be the value from the first column of cons_CA_CY
  # row[2] will be the value from the second column of cons_CA_CY
  bullet_points <- apply(cons_CAWCD_CY2, 1, function(row) {
    paste0("  * ", row[1], " : ", ifelse(as.numeric(row[2])>100, paste0(round(((as.numeric(row[2])/1000)*100+.1),-1)/100 , " kaf\n"), paste0(round((as.numeric(row[2])*10+.1),-1)/10, " af\n") ))
  })
  
  # Print each bullet point, separated by a newline
  cat(paste0(bullet_points, collapse = ""))
  
} 

```

* Bullhead City PSCP volume of `r as.numeric(find_rows_containing_string(Max2, "BHC")$value)*-1` af

```{r conditional-AZ-242-Y2, results='asis', echo=FALSE}

if(find_rows_containing_string(cons_NonCAWCD,"242 Wellfield")[,column_number+1]>0){
  add242 = TRUE
  vol242 = sprintf("%.1f",round(find_rows_containing_string(cons_NonCAWCD,"242 Wellfield")[,column_number+1]/1000,1))
} else{
  add242 = FALSE
  vol242=""
}

if (exists("add242") && add242) {
  
  cat("* System water created by the 242 Well Field Expansion Project of ")
  cat(vol242)
  cat(" kaf\n")
}

```


```{r conditional-AZ-BICS-Y2, results='asis', echo=FALSE}

if (exists("addBICS") && addBICS) {
  
  cat("* Binational ICS creation of ")
  cat(bics)
  cat(" kaf by CAWCD\n")
}

```

##### Nevada: [`r sprintf("%.3f",round(find_rows_containing_string(sct_data, "NvTotalAnnual")[1,3]/1000000,3))` maf]{style="color: #0070C0;"}

* SNWA annual use of `r round(find_rows_containing_string(sct_data, "SNWPAnnualFC")[1,3]/1000,0)` kaf. Projected diversion includes:

```{r conditional-NV-Shortage-Y2, results='asis', echo=FALSE}
# This R code chunk will print Markdown text if the condition is met.
# The 'results="asis"' option is crucial for this to work.

if(find_rows_containing_string(sct_data, "SNWP Annual Shortage Volume")[1,3]>0){
  addNVShortage = TRUE
  nvshort = unlist(unname(round(find_rows_containing_string(sct_data, "SNWP Annual Shortage Volume")[1,3]/1000,0)))
} else{
  addNVShortage = FALSE
  nvshort=""
}

if(find_rows_containing_string(sct_data, "VacatedECICSToBeDelivered_SNWA")[1,3]>0){
  addECICSdel = TRUE
  nvECICSdel = unlist(unname(round(find_rows_containing_string(sct_data, "VacatedECICSToBeDelivered_SNWA")[1,3]/1000,1)))
} else{
  addECICSdel = FALSE
  nvECICSdel=""
}

if (exists("addNVShortage") && addNVShortage) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("  * Shortage volume of ")
  cat(nvshort)
  cat(" kaf\n")
}

if (exists("addECICSdel") && addECICSdel) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("  * Delivery of ")
  cat(nvECICSdel)
  cat(" kaf of EC ICS due to full ICS bank\n")
}

```


```{r conditional-NV-DCP-Y2, results='asis', echo=FALSE}
# This R code chunk will print Markdown text if the condition is met.
# The 'results="asis"' option is crucial for this to work.

if(find_rows_containing_string(sct_data, "AnnualCreationDCP_NV")[1,3]>0){
  addNVDCP = TRUE
  nvdcp = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationDCP_NV")[1,3]/1000,0)))
} else{
  addNVDCP = FALSE
  nvdcp=""
}

if (exists("addNVDCP") && addNVDCP) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("* DCP contribution of ")
  cat(nvdcp)
  cat(" kaf through EC ICS conversion\n")
}


```


```{r conditional-NV-SysCons-Y2, results='asis', echo=FALSE}
# This R code chunk will print Markdown text if the condition is met.
# The 'results="asis"' option is crucial for this to work.

if(find_rows_containing_string(sct_data, "NV_SystemConservation")[1,3]>0){
  addNVTotSyscon = TRUE
  nvTotSyscon = unlist(unname(round(find_rows_containing_string(sct_data, "NV_SystemConservation")[1,3]/1000,0)))
} else{
  addNVTotSyscon = FALSE
  nvTotSyscon=""
}

if(find_rows_containing_string(sct_data, "NV_LeftinMead")[1,3]>0){
  addTribSyscon = TRUE
  nvTribSyscon = unlist(unname(round(find_rows_containing_string(sct_data, "NV_LeftinMead")[1,3]/1000,0)))
} else{
  addTribSyscon = FALSE
  nvTribSyscon=""
}


if (exists("addNVTotSyscon") && addNVTotSyscon) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("* Total System Conservation of ")
  cat(nvTotSyscon)
  cat(" kaf\n")
}

if (exists("addTribSyscon") && addTribSyscon) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("  * Tributary conservation of ")
  cat(nvTribSyscon)
  cat(" kaf\n")
}

if(addNVTotSyscon && addTribSyscon) {
  if((nvTotSyscon - nvTribSyscon)>0){
    cat("  * Other system conservation of ")
    cat(nvTotSyscon - nvTribSyscon)
    cat(" kaf\n")
  }
}


```

```{r conditional-NV-BICS-Y2, results='asis', echo=FALSE}

if (exists("addBICS") && addBICS) {
  
  cat("* Binational ICS creation of ")
  cat(bics)
  cat(" kaf by SNWA\n")
}

if(find_rows_containing_string(sct_data, "VacatedDCPICSToSysWater_SNWA")[1,3]>0){
  addVacDCPtoSys = TRUE
  nvVacDCPtoSys = unlist(unname(round(find_rows_containing_string(sct_data, "VacatedDCPICSToSysWater_SNWA")[1,3]/1000,1)))
} else{
  addVacDCPtoSys = FALSE
  nvVacDCPtoSys=""
}

if(find_rows_containing_string(sct_data, "VacatedECICSToSysWater_SNWA")[1,3]>0){
  addVacECICStoSys = TRUE
  nvVacECICStoSys = unlist(unname(round(find_rows_containing_string(sct_data, "VacatedECICSToSysWater_SNWA")[1,3]/1000,1)))
} else{
  addVacECICStoSys = FALSE
  nvVacECICStoSys=""
}

if (addVacDCPtoSys && addVacECICStoSys) {
  # Both are TRUE: assign the sum
  totaltosys <- nvVacDCPtoSys + nvVacECICStoSys
} else if (addVacDCPtoSys) {
  # Only addVacDCPtoSys is TRUE: assign its corresponding numeric value
  totaltosys <- nvVacDCPtoSys
} else if (addVacECICStoSys) {
  # Only addVacECICStoSys is TRUE: assign its corresponding numeric value
  totaltosys <- nvVacECICStoSys # Using the assumed numeric variable name
}

if (addVacDCPtoSys || addVacECICStoSys) {
  cat("* Vacated ICS space (to system water) of ") 
  cat(totaltosys)
  cat(" kaf\n")
}

if (addVacDCPtoSys){
  cat("  * DCP ICS of ")
  cat(nvVacDCPtoSys)
  cat(" kaf converted to system water\n")
}

if (addVacECICStoSys){
  cat("  * EC ICS of ")
  cat(nvVacECICStoSys)
  cat(" kaf converted to system water\n")
}

```


#### Mexicoâ€™s Scheduled Water Delivery: `r sprintf("%.3f", round(as.numeric(find_rows_containing_string(Max2, "Mexico Use")$value)/1000000,3))` maf

```{r conditional-Mx-short-Y2, results='asis', echo=FALSE}
# This R code chunk will print Markdown text if the condition is met.
# The 'results="asis"' option is crucial for this to work.

if(find_rows_containing_string(sct_data, "Mexico Annual Shortage")[1,3]>0){
  addMxShort = TRUE
  mxShort = unlist(unname(round(find_rows_containing_string(sct_data, "Mexico Annual Shortage")[1,3]/1000,0)))
} else{
  addMxShort = FALSE
  mxShort=""
}

if(find_rows_containing_string(sct_data, "AnnualCreationMXRecoverableWaterSavings")[1,3]>0){
  createWaterSav = TRUE
  mxCreateWaterSav = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationMXRecoverableWaterSavings")[1,3]/1000,0)))
} else{
  createWaterSav = FALSE
  mxCreateWaterSav=""
}

if(find_rows_containing_string(sct_data, "AnnualDeliveryMXRecoverableWaterSavings")[1,3]>0){
  delWaterSav = TRUE
  mxdelWaterSav = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualDeliveryMXRecoverableWaterSavings")[1,3]/1000,0)))
} else{
  delWaterSav = FALSE
  mxdelWaterSav=""
}

if(find_rows_containing_string(sct_data, "MX_SystemConservation")[1,3]>0){
  createsysCons = TRUE
  mxSysCon = unlist(unname(round(find_rows_containing_string(sct_data, "MX_SystemConservation")[1,3]/1000,1)))
} else{
  createsysCons = FALSE
  mxSysCon=""
}

if(find_rows_containing_string(sct_data, "AnnualDeliveryMexicoWaterReserve")[1,3]>0){
  delMWR = TRUE
  mxdelMWR = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualDeliveryMexicoWaterReserve")[1,3]/1000,1)))
} else{
  delMWR = FALSE
  mxdelMWR=""
}

if(find_rows_containing_string(sct_data, "AnnualCreationMexicoWaterReserve")[1,3]>0){
  createMWR = TRUE
  mxcreateMWR = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationMexicoWaterReserve")[1,3]/1000,1)))
} else{
  createMWR = FALSE
  mxcreateMWR=""
}

if (exists("createWaterSav") && createWaterSav) {
  cat("* Projected delivery includes:\n")
  
  if (exists("addMxShort") && addMxShort) {
    cat("  * Shortage volume of ")
    cat(mxShort)
    cat(" kaf\n")
  }
  
  cat("  * Recoverable Water Savings Contribution of ")
  cat(mxCreateWaterSav)
  cat(" kaf\n")
  
  if (exists("delWaterSav") && delWaterSav) {
    cat("  * Recoverable Water Savings Delivery of ")
    cat(mxdelWaterSav)
    cat(" kaf\n")
  }
  
  if (exists("createsysCons") && createsysCons) {
    cat("  * Minute 330 System Conservation of ")
    cat(mxSysCon)
    cat(" kaf\n")
  }
  
  if (exists("delMWR") && delMWR) {
    cat("* Water Reserve delivery of ")
    cat(mxdelMWR)
    cat(" kaf\n")
  }
  
  if (exists("createMWR") && createMWR) {
    cat("* Water Reserve creation of ")
    cat(mxcreateMWR)
    cat(" kaf\n")
  }
}

```


### `r as.numeric(current_year) + 2`

Total projected water use **(`r sprintf("%.3f",round(as.numeric(find_rows_containing_string(Max3,"Total Basin Use")$value)/1000000,3))` maf)** â€“ Based on Lake Mead Operating Condition of Level 2 Shortage and water savings contributions under the LB DCP Agreement and IBWC Minute 323. For modeling purposes, simulated years beyond 2026 assume a continuation of the 2007 Interim Guidelines, the 2019 Colorado River Basin Drought Contingency Plans, and Minute 323, including the Binational Water Scarcity Contingency Plan. Except for certain provisions related to ICS recovery and Upper Basin demand management, operations under these agreements are in effect through 2026. Reclamation initiated the process to develop operations for post-2026 in June 2023, and the modeling assumptions described here are subject to change.

#### U.S. Contractors: `r sprintf("%.3f",round(sum(apportionment[,4])/1000000,3))` maf

##### California: [`r sprintf("%.3f",round(sum(apportionment[1,4])/1000000,3))` maf]{style="color: #0070C0;"}
* MWD annual diversion of `r round(as.numeric(find_rows_containing_string(sct_data,"MWDDiversionAnnualFC")[4])/1000,0)` kaf
    * Projected diversion includes the `r mwdICSY3` kaf of ICS
    
```{r generate-bullet-list-apply-3, results='asis'}
# Check if cons_CA_CY3 has rows and at least two columns before proceeding

if (nrow(cons_CA_CY3) > 0 && ncol(cons_CA_CY3) >= 2) {
  
  cat("* Total California System Conservation of ")
  cat(sprintf("%.1f",round(sum(cons_CA[,column_number+2])/1000,1)))
  cat(" kaf\n")

  # Use apply to iterate over rows. For each row:
  # row[1] will be the value from the first column of cons_CA_CY
  # row[2] will be the value from the second column of cons_CA_CY
  bullet_points <- apply(cons_CA_CY3, 1, function(row) {
    paste0("  * ", row[1], " system conservation of ", round(as.numeric(row[2])/1000,1) , " kaf\n")
  })
  
  # Print each bullet point, separated by a newline
  cat(paste0(bullet_points, collapse = ""))
  
} 

```

* Needles PSCP volume of `r as.numeric(find_rows_containing_string(Max3, "Needles")$value)*-1` af

```{r conditional-CA-BICS-Y3, results='asis', echo=FALSE}

if(find_rows_containing_string(sct_data, "AnnualCreationBiNat_MWD")[1,4]>0){
  addBICS = TRUE
  bics = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationBiNat_MWD")[1,4]/1000,1)))
} else{
  addBICS = FALSE
  bics=""
}

if (exists("addBICS") && addBICS) {
  
  cat("* Binational ICS creation of ")
  cat(bics)
  cat(" kaf by MWD and IID\n")
}


```

##### Arizona: [`r sprintf("%.3f",round(sum(apportionment[2,4])/1000000,3))` maf]{style="color: #0070C0;"}
* CAP annual diversion of `r prettyNum(round(find_rows_containing_string(sct_data, "CAPAnnualFC")[1,4]/1000,0),  big.mark = ",", scientific = FALSE)` kaf
```{r conditional-AZ-reductions-Y3, results='asis', echo=FALSE}

addreductions = calculate_AZ_reductions(year=3, sct_data = sct_data)$addreductions
reductions_scen_all = calculate_AZ_reductions(year=3, sct_data = sct_data)$reductions_scen_all

if (exists("addreductions") && addreductions) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("    * Projected diversion includes a ")
  cat(reductions_scen_all)
  cat("\n")
}

az_dcpICS <- find_rows_containing_string(sct_data, "AnnualCreationDCP_CAWCD")[4]
az_dcpICS <- ifelse((az_dcpICS/1000) %% 1 != 0, round(az_dcpICS/1000, 1), round(az_dcpICS/1000, 0))
az_dcpSys <- find_rows_containing_string(sct_data, "AnnualSysWaterforDCP_CAWCD")[4]
az_dcpSys <- ifelse((az_dcpSys/1000) %% 1 != 0, round(az_dcpSys/1000, 1), round(az_dcpSys/1000, 0))

```

* DCP contribution will be made by creating `r ifelse(az_dcpICS > 0, paste0(az_dcpICS, " kaf of ICS and ", az_dcpSys, " kaf of non-ICS water"), paste0(az_dcpSys, " kaf of non-ICS water"))` 
* Total non-CAWCD System Conservation of `r sprintf("%.1f",round(sum(cons_NonCAWCD_filt[,column_number +2])/1000,1))` kaf
```{r generate-bullet-list-nonCAWCD-Y3, results='asis'}
# Check if cons_CA_CY3 has rows and at least two columns before proceeding
if (nrow(cons_NonCAWCD_CY3) > 0 && ncol(cons_NonCAWCD_CY3) >= 2) {

  # Use apply to iterate over rows. For each row:
  # row[1] will be the value from the first column of cons_CA_CY
  # row[2] will be the value from the second column of cons_CA_CY
  bullet_points <- apply(cons_NonCAWCD_CY3, 1, function(row) {
    paste0("  * ", row[1], " : ", ifelse(as.numeric(row[2])>100, paste0(round(((as.numeric(row[2])/1000)*100+.1),-1)/100 , " kaf\n"), paste0(round((as.numeric(row[2])*10+.1),-1)/10, " af\n") ))
  })
  
  # Print each bullet point, separated by a newline
  cat(paste0(bullet_points, collapse = ""))
  
} 

```

* Total CAWCD System Conservation of `r sprintf("%.1f",round(sum(cons_CAWCD[,column_number +2])/1000,1))` kaf

```{r generate-bullet-list-CAWCD-Y3, results='asis'}
# Check if cons_CA_CY3 has rows and at least two columns before proceeding
if (nrow(cons_CAWCD_CY3) > 0 && ncol(cons_CAWCD_CY3) >= 2) {

  # Use apply to iterate over rows. For each row:
  # row[1] will be the value from the first column of cons_CA_CY
  # row[2] will be the value from the second column of cons_CA_CY
  bullet_points <- apply(cons_CAWCD_CY3, 1, function(row) {
    paste0("  * ", row[1], " : ", ifelse(as.numeric(row[2])>100, paste0(round(((as.numeric(row[2])/1000)*100+.1),-1)/100 , " kaf\n"), paste0(round((as.numeric(row[2])*10+.1),-1)/10, " af\n") ))
  })
  
  # Print each bullet point, separated by a newline
  cat(paste0(bullet_points, collapse = ""))
  
} 

```

* Bullhead City PSCP volume of `r as.numeric(find_rows_containing_string(Max3, "BHC")$value)*-1` af

```{r conditional-AZ-242-Y3, results='asis', echo=FALSE}

if(find_rows_containing_string(cons_NonCAWCD,"242 Wellfield")[,column_number+2]>0){
  add242 = TRUE
  vol242 = sprintf("%.1f",round(find_rows_containing_string(cons_NonCAWCD,"242 Wellfield")[,column_number+2]/1000,1))
} else{
  add242 = FALSE
  vol242=""
}

if (exists("add242") && add242) {
  
  cat("* System water created by the 242 Well Field Expansion Project of ")
  cat(vol242)
  cat(" kaf\n")
}

```


```{r conditional-AZ-BICS-Y3, results='asis', echo=FALSE}

if (exists("addBICS") && addBICS) {
  
  cat("* Binational ICS creation of ")
  cat(bics)
  cat(" kaf by CAWCD\n")
}

```


##### Nevada: [`r sprintf("%.3f",round(find_rows_containing_string(sct_data, "NvTotalAnnual")[1,4]/1000000,3))` maf]{style="color: #0070C0;"}

* SNWA annual use of `r round(find_rows_containing_string(sct_data, "SNWPAnnualFC")[1,4]/1000,0)` kaf. Projected diversion includes:

```{r conditional-NV-Shortage-Y3, results='asis', echo=FALSE}

if(find_rows_containing_string(sct_data, "SNWP Annual Shortage Volume")[1,4]>0){
  addNVShortage = TRUE
  nvshort = unlist(unname(round(find_rows_containing_string(sct_data, "SNWP Annual Shortage Volume")[1,4]/1000,0)))
} else{
  addNVShortage = FALSE
  nvshort=""
}

if(find_rows_containing_string(sct_data, "AnnualCreationEC_NV")[1,4]>0){
  addECICScreate = TRUE
  nvECICSCreate = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationEC_NV")[1,4]/1000,1)))
} else{
  addECICScreate = FALSE
  nvECICSCreate=""
}

if(find_rows_containing_string(sct_data, "VacatedECICSToBeDelivered_SNWA")[1,4]>0){
  addECICSdel = TRUE
  nvECICSdel = unlist(unname(round(find_rows_containing_string(sct_data, "VacatedECICSToBeDelivered_SNWA")[1,4]/1000,1)))
} else{
  addECICSdel = FALSE
  nvECICSdel=""
}

if (exists("addNVShortage") && addNVShortage) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("  * Shortage volume of ")
  cat(nvshort)
  cat(" kaf\n")
}

if (exists("addECICScreate") && addECICScreate) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("  * EC ICS creation of ")
  cat(nvECICSCreate)
  cat(" kaf\n")
}

if (exists("addECICSdel") && addECICSdel) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("  * Delivery of ")
  cat(nvECICSdel)
  cat(" kaf of EC ICS due to full ICS bank\n")
}


```


```{r conditional-NV-DCP-Y3, results='asis', echo=FALSE}

if(find_rows_containing_string(sct_data, "AnnualCreationDCP_NV")[1,4]>0){
  addNVDCP = TRUE
  nvdcp = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationDCP_NV")[1,4]/1000,0)))
} else{
  addNVDCP = FALSE
  nvdcp=""
}

if (exists("addNVDCP") && addNVDCP) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("* DCP contribution of ")
  cat(nvdcp)
  cat(" kaf through EC ICS conversion\n")
}


```


```{r conditional-NV-SysCons-Y3, results='asis', echo=FALSE}

if(find_rows_containing_string(sct_data, "NV_SystemConservation")[1,4]>0){
  addNVTotSyscon = TRUE
  nvTotSyscon = unlist(unname(round(find_rows_containing_string(sct_data, "NV_SystemConservation")[1,4]/1000,0)))
} else{
  addNVTotSyscon = FALSE
  nvTotSyscon=""
}

if(find_rows_containing_string(sct_data, "NV_LeftinMead")[1,4]>0){
  addTribSyscon = TRUE
  nvTribSyscon = unlist(unname(round(find_rows_containing_string(sct_data, "NV_LeftinMead")[1,4]/1000,0)))
} else{
  addTribSyscon = FALSE
  nvTribSyscon=""
}


if (exists("addNVTotSyscon") && addNVTotSyscon) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("* Total System Conservation of ")
  cat(nvTotSyscon)
  cat(" kaf\n")
}

if (exists("addTribSyscon") && addTribSyscon) {
  #cat("\n") # Ensures a new line before the conditional text
  cat("  * Tributary conservation of ")
  cat(nvTribSyscon)
  cat(" kaf\n")
}

if(addNVTotSyscon && addTribSyscon) {
  if((nvTotSyscon - nvTribSyscon)>0){
    cat("  * Other system conservation of ")
    cat(nvTotSyscon - nvTribSyscon)
    cat(" kaf\n")
  }
}

```

```{r conditional-NV-BICS-Y3, results='asis', echo=FALSE}

if (exists("addBICS") && addBICS) {
  
  cat("* Binational ICS creation of ")
  cat(bics)
  cat(" kaf by SNWA\n")
}

if(find_rows_containing_string(sct_data, "VacatedDCPICSToSysWater_SNWA")[1,4]>0){
  addVacDCPtoSys = TRUE
  nvVacDCPtoSys = unlist(unname(round(find_rows_containing_string(sct_data, "VacatedDCPICSToSysWater_SNWA")[1,4]/1000,1)))
} else{
  addVacDCPtoSys = FALSE
  nvVacDCPtoSys=""
}

if(find_rows_containing_string(sct_data, "VacatedECICSToSysWater_SNWA")[1,4]>0){
  addVacECICStoSys = TRUE
  nvVacECICStoSys = unlist(unname(round(find_rows_containing_string(sct_data, "VacatedECICSToSysWater_SNWA")[1,4]/1000,1)))
} else{
  addVacECICStoSys = FALSE
  nvVacECICStoSys=""
}

if (addVacDCPtoSys && addVacECICStoSys) {
  # Both are TRUE: assign the sum
  totaltosys <- nvVacDCPtoSys + nvVacECICStoSys
} else if (addVacDCPtoSys) {
  # Only addVacDCPtoSys is TRUE: assign its corresponding numeric value
  totaltosys <- nvVacDCPtoSys
} else if (addVacECICStoSys) {
  # Only addVacECICStoSys is TRUE: assign its corresponding numeric value
  totaltosys <- nvVacECICStoSys # Using the assumed numeric variable name
}

if (addVacDCPtoSys || addVacECICStoSys) {
  cat("* Vacated ICS space (to system water) of ") 
  cat(totaltosys)
  cat(" kaf\n")
}

if (addVacDCPtoSys){
  cat("  * DCP ICS of ")
  cat(nvVacDCPtoSys)
  cat(" kaf converted to system water\n")
}

if (addVacECICStoSys){
  cat("  * EC ICS of ")
  cat(nvVacECICStoSys)
  cat(" kaf converted to system water\n")
}

```



#### Mexicoâ€™s Scheduled Water Delivery: `r sprintf("%.3f", round(as.numeric(find_rows_containing_string(Max3, "Mexico Use")$value)/1000000,3))` maf

```{r conditional-Mx-short-Y3, results='asis', echo=FALSE}

if(find_rows_containing_string(sct_data, "Mexico Annual Shortage")[1,4]>0){
  addMxShort = TRUE
  mxShort = unlist(unname(round(find_rows_containing_string(sct_data, "Mexico Annual Shortage")[1,4]/1000,0)))
} else{
  addMxShort = FALSE
  mxShort=""
}

if(find_rows_containing_string(sct_data, "AnnualCreationMXRecoverableWaterSavings")[1,4]>0){
  createWaterSav = TRUE
  mxCreateWaterSav = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationMXRecoverableWaterSavings")[1,4]/1000,0)))
} else{
  createWaterSav = FALSE
  mxCreateWaterSav=""
}

if(find_rows_containing_string(sct_data, "AnnualDeliveryMXRecoverableWaterSavings")[1,4]>0){
  delWaterSav = TRUE
  mxdelWaterSav = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualDeliveryMXRecoverableWaterSavings")[1,4]/1000,0)))
} else{
  delWaterSav = FALSE
  mxdelWaterSav=""
}

if(find_rows_containing_string(sct_data, "MX_SystemConservation")[1,4]>0){
  createsysCons = TRUE
  mxSysCon = unlist(unname(round(find_rows_containing_string(sct_data, "MX_SystemConservation")[1,4]/1000,1)))
} else{
  createsysCons = FALSE
  mxSysCon=""
}

if(find_rows_containing_string(sct_data, "AnnualDeliveryMexicoWaterReserve")[1,4]>0){
  delMWR = TRUE
  mxdelMWR = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualDeliveryMexicoWaterReserve")[1,4]/1000,1)))
} else{
  delMWR = FALSE
  mxdelMWR=""
}

if(find_rows_containing_string(sct_data, "AnnualCreationMexicoWaterReserve")[1,4]>0){
  createMWR = TRUE
  mxcreateMWR = unlist(unname(round(find_rows_containing_string(sct_data, "AnnualCreationMexicoWaterReserve")[1,4]/1000,1)))
} else{
  createMWR = FALSE
  mxcreateMWR=""
}

if (exists("createWaterSav") && createWaterSav) {
  cat("* Projected delivery includes:\n")
  
  if (exists("addMxShort") && addMxShort) {
    cat("  * Shortage volume of ")
    cat(mxShort)
    cat(" kaf\n")
  }
  
  cat("  * Recoverable Water Savings Contribution of ")
  cat(mxCreateWaterSav)
  cat(" kaf\n")
  
  if (exists("delWaterSav") && delWaterSav) {
    cat("  * Recoverable Water Savings Delivery of ")
    cat(mxdelWaterSav)
    cat(" kaf\n")
  }
  
  if (exists("createsysCons") && createsysCons) {
    cat("  * Minute 330 System Conservation of ")
    cat(mxSysCon)
    cat(" kaf\n")
  }
  
  if (exists("delMWR") && delMWR) {
    cat("* Water Reserve delivery of ")
    cat(mxdelMWR)
    cat(" kaf\n")
  }
  
  if (exists("createMWR") && createMWR) {
    cat("* Water Reserve creation of ")
    cat(mxcreateMWR)
    cat(" kaf\n")
  }
}

```


### ICS Totals

* Projected ICS Total Storage at the end of CY 2027: **2.687 maf**
* Projected ICS Storage Balances at the end of each calendar year in the study are as follows:

```{=openxml}
<w:p><w:r><w:br/></w:r></w:p>
```

```{r ics-table}
# The global options echo=FALSE, warning=FALSE, message=FALSE from the setup chunk will apply here
# Load the knitr package if you haven't in the setup chunk
data <- find_rows_containing_string(sct_data, "Bank_")

transformed_data <- data %>%
  mutate(Item = stringr::str_sub(Item, -2)) %>%
  rename_with(~ifelse(. == "Item", "State (volumes in AF)", sub("^CY", "", .))) %>%
  janitor::adorn_totals(where = "row", fill = "-", na.rm = TRUE, name = "Total")

# --- Create and Style the flextable for DOCX ---
# Identify numeric columns by name (excluding the 'State' column)
numeric_cols <- setdiff(names(transformed_data), "State (volumes in AF)")

ft <- flextable(transformed_data)

ft <- colformat_num(
  x = ft,
  j = numeric_cols,
  big.mark = ",",
  digits = 0,
  na_str = ""
)

ft <- bold(ft, part = "header", bold = TRUE) # Bolds the entire header
ft <- bold(ft, i = nrow(transformed_data), part = "body", bold = TRUE) # Bolds the total row

border_style <- fp_border(color = "black", width = 1)
ft <- border_remove(x = ft)
ft <- border_outer(x = ft, part = "all", border = border_style)
ft <- border_inner_h(x = ft, part = "all", border = border_style)
ft <- border_inner_v(x = ft, part = "all", border = border_style)

ft <- padding(ft, padding = 2, part = "all") # Reduced cell padding

# Alternatively, for more control:
# ft <- padding(ft,
#               padding.top = 1,
#               padding.bottom = 1,
#               padding.left = 3,  # Default is often 5pt
#               padding.right = 3, # Default is often 5pt
#               part = "all")

# Center align header text for numeric columns
ft <- align(
  x = ft,
  j = numeric_cols,   # Target only the numeric columns
  align = "center",   # Set alignment to center
  part = "all"     # Apply to the header part only
)

# Set font size for all cells in the table to 10pt
ft <- fontsize(
  x = ft,
  size = 10,        # Font size in points
  part = "all"      # Apply to header and body
)


ft <- autofit(ft) # Autofit after all styling is applied

# --- Display the flextable in Quarto ---
# Simply having `ft` as the last expression in an R code chunk
# will render it correctly for DOCX output.
ft

```

```{=openxml}
<w:p>
  <w:r>
    <w:br w:type="page"/>
  </w:r>
</w:p>
```

### Modeled Lower Basin Conservation Actions
```{r}

# --- 2. Define File Path and Import Data ---
file_path <- "data/Projected State Use -APR25.xlsx"
sheet_name <- "SysCon SummaryTable"
excel_range <- "C79:I103"

raw_excel_data <- readxl::read_excel(
  path = file_path,
  sheet = sheet_name,
  range = excel_range,
  col_names = FALSE # Read without initial column names
)

# --- 3. Prepare Data ---
selected_raw_data_indices <- c(2, 3, 4, 5, 6, 7) 
df_data_rows <- raw_excel_data[-1, selected_raw_data_indices]

clean_col_names <- c("State", "Conservation Activity", "2025", "2026", "2027", "Total")
colnames(df_data_rows) <- clean_col_names
df <- df_data_rows

numeric_cols <- c("2025", "2026", "2027", "Total")

df <- df %>%
  mutate(across(all_of(numeric_cols), 
                ~round(suppressWarnings(as.numeric(as.character(.))), digits = 0)
         ))

num_data_rows <- nrow(df)
annual_total_row_df_idx <- num_data_rows - 1 
cumulative_total_row_df_idx <- num_data_rows 

annual_total_label <- raw_excel_data[1 + annual_total_row_df_idx, 1, drop = TRUE] 
cumulative_total_label <- raw_excel_data[1 + cumulative_total_row_df_idx, 1, drop = TRUE]

if (!is.na(annual_total_label) && annual_total_label == "Annual Total") {
  df[annual_total_row_df_idx, "Conservation Activity"] <- annual_total_label
  df[annual_total_row_df_idx, "State"] <- ""
}
if (!is.na(cumulative_total_label) && cumulative_total_label == "Cumulative Total") {
  df[cumulative_total_row_df_idx, "Conservation Activity"] <- cumulative_total_label
  df[cumulative_total_row_df_idx, "State"] <- ""
}

# --- 4. Create Flextable ---
ft <- flextable(df)

# --- 5. Apply Styling ---
fp_border_thin <- fp_border(color = "black", width = 1)
fp_border_less_thick <- fp_border(color = "black", width = 1.5) 

light_gray_bg_header <- "#F0F0F0" 
zebra_gray_bg <- "#F5F5F5"     

ft <- theme_zebra(ft, odd_body = "transparent", even_body = zebra_gray_bg)
ft <- bg(ft, j = "State", bg = "transparent", part = "body") 

# A. Header Styling
ft <- bold(ft, part = "header", bold = TRUE)
ft <- align(ft, align = "center", part = "header")
ft <- bg(ft, bg = light_gray_bg_header, part = "header") 

# B. State Column Styling
state_merge_groups <- list(1:10, 11:18, 19:20, 21:22) 
for (rows_to_merge in state_merge_groups) {
  ft <- merge_at(ft, i = rows_to_merge, j = "State", part = "body")
}
if (length(annual_total_row_df_idx) > 0 && length(cumulative_total_row_df_idx) > 0 &&
    cumulative_total_row_df_idx == annual_total_row_df_idx + 1) {
  ft <- merge_at(ft, i = annual_total_row_df_idx:cumulative_total_row_df_idx, j = "State", part = "body")
}

ft <- bold(ft, j = "State", bold = TRUE, part = "body") 
ft <- align(ft, j = "State", align = "center", part = "body")    
ft <- valign(ft, j = "State", valign = "center", part = "body")   
# Text rotation abandoned

# C. Numeric Column Formatting & Alignment
ft <- colformat_num(ft, j = numeric_cols, big.mark = ",", digits = 0, na_str = "") 
ft <- align(ft, j = numeric_cols, align = "right", part = "body")
if(length(annual_total_row_df_idx) > 0) {
  ft <- align(ft, i = annual_total_row_df_idx, j = numeric_cols, align = "right", part = "body")
}
if(length(cumulative_total_row_df_idx) > 0) {
  ft <- align(ft, i = cumulative_total_row_df_idx, j = numeric_cols, align = "right", part = "body")
}

# D. "Annual Total" & "Cumulative Total" Row Styling
if(length(annual_total_row_df_idx) > 0) {
  ft <- bold(ft, i = annual_total_row_df_idx, bold = TRUE, part = "body")
  ft <- align(ft, i = annual_total_row_df_idx, j = "Conservation Activity", align = "left", part = "body")
}
if(length(cumulative_total_row_df_idx) > 0) {
  ft <- bold(ft, i = cumulative_total_row_df_idx, bold = TRUE, part = "body")
  ft <- align(ft, i = cumulative_total_row_df_idx, j = "Conservation Activity", align = "left", part = "body")
}

# E. General Borders & Specific Thick Horizontal Lines
ft <- border_remove(ft) # Clear all existing borders first

# Apply general inner borders (thin)
ft <- border_inner_h(ft, border = fp_border_thin, part = "all") 
ft <- border_inner_v(ft, border = fp_border_thin, part = "all") 

# Apply outer border for the whole table (using new "less thick")
ft <- border_outer(ft, border = fp_border_less_thick, part = "all") 

# Re-apply specific less_thick hlines (these will override inner thin ones where they apply)
ft <- hline_bottom(ft, part = "header", border = fp_border_less_thick) 

hline_group_separator_indices <- c(10, 18, 20, 22) 
ft <- hline(ft, i = hline_group_separator_indices, border = fp_border_less_thick, part = "body")

# Ensure bottom border of the entire last data row is less_thick
if (nrow(df) > 0) {
  ft <- hline(ft, i = cumulative_total_row_df_idx, border = fp_border_less_thick, part = "body")
}

# **REMOVED THE style() CALL THAT WAS HERE**
# The border_outer() and the hline() for the last row (above) should collectively 
# ensure the correct left and bottom borders for the State column's last cell.

# F. Fontsize, Padding, and Line Spacing
ft <- fontsize(ft, size = 9, part = "all")
ft <- padding(ft, padding.top = 2, padding.bottom = 2, padding.left = 4, padding.right = 4, part = "all")
ft <- line_spacing(ft, space = 1.2, part = "all") 

# G. Initial Widths & Autofit
if (ncol(df) == 6) {
    ft <- width(ft, j = "State", width = 0.5) 
    ft <- width(ft, j = "Conservation Activity", width = 2.8)
    ft <- width(ft, j = c("2025", "2026", "2027", "Total"), width = 0.75)
}
#ft <- autofit(ft)

# --- 6. Output Flextable ---
ft

```


## Notes and Disclaimers

* Modeled Conservation volumes reflect executed agreements and/or current operational projections/assumptions and are subject to change. Additional conservation activities are being considered. After new agreements are finalized and executed, these additional activities will be included in Reclamationâ€™s operational modeling.
* Projected SEIS ROD Reservoir Protection Volume is 3.631 from 2023 through 2026.

